#!/usr/local/google/home/kozyatinskiy/node/bin/node

var auth = require("./auth.js");

var network = require("./network.js");

var net = require("net");

var serializer = require("./serializer.js");

var session = {};

var authClient = new AuthClient();

var authSteps = [getAuth, /*, initialConnection*//*, callback => setTimeout(login.bind(null, callback), 1000)*/];

(function run() {
    // return;
    if (!authSteps.length) {
        console.log(session);
        return;
    }
    var f = authSteps.shift();
    f.call(null, run);
})();

function getAuth(callback)
{
    authClient.auth("USER", "PASS", function (result){
        session.authResult = result;
        callback();
    });
}

function initialConnection(callback)
{
    const client = net.connect({port: 25570, host: "37.59.31.213"}, () => { //'connect' listener
        console.log('connected to server!');

        const buffer = new Buffer([0x12, 0x00, 0x04, 0x0c, 0x33, 0x37,
                                   0x2e, 0x35, 0x39, 0x2e, 0x33, 0x31,
                                   0x2e, 0x32, 0x31, 0x33, 0x63, 0xe2, 0x01 ]);
        client.write(buffer);
        client.write(new Buffer([0x01, 0x00]));
        // client.write(new Buffer([0x07, 0x00, 0x05, 0x61, 0x6b, 0x32, 0x33, 0x39]));
    });

    var ref = 0;
    var logging = false;
    var received = 0;
    client.on('data', function(data) {
        if (ref)
            clearTimeout(ref);
        ref = setTimeout(function(){
            var v = received;
            ++received;
            if (v === 0)
                client.write(new Buffer([0x09, 0x01, 0x00, 0x00, 0x01, 0x52, 0x1a, 0xc2, 0x5d, 0x13]));
            if (v === 1) {
                client.end();
                callback();
            }
                // client.write(new Buffer([0x07, 0x00, 0x05, 0x61, 0x6b, 0x32, 0x33, 0x39]));
            logging = true;
        }, 1000);
        if (logging)
            console.log(data);
    });

    client.on("end", function() {
        console.log("Connection closed");
    });
}

Variable = {};

Variable.VarInt = function(number) {
    this.number = number;
}

// Variable.VarInt.fromBuffer = function()

Variable.VarInt.prototype = {
    toBuffer: function() {
        var bytes = [];
        var tmp = this.number;
        while (tmp) {
            var b = tmp % 128;
            if (tmp >= 128)
                b = b | 1 << 7;
            bytes.push(b);
            tmp = Math.floor(tmp / 128);
        }
        return new Buffer(bytes);
    }
}

console.log(new Variable.VarInt(10).toBuffer());
console.log(new Variable.VarInt(1).toBuffer());
console.log(new Variable.VarInt(300).toBuffer());

function login(callback)
{
    const client = net.connect({port: 25570, host: "37.59.31.213"}, () => { //'connect' listener
        console.log('connected to server!');
                     /* packet length   packet id  proto ver  length = 12                                        */
        client.write(new Buffer([0x12,  0x00,      0x04,      0x0c,       0x33, 0x37,
                                   0x2e, 0x35, 0x39, 0x2e, 0x33, 0x31,
                                   /*                      port: 25570 next login */
                                   0x2e, 0x32, 0x31, 0x33, 0x63, 0xe2, 0x02 ]));
        setTimeout(function(){
            client.write(new Buffer([0x07, 0x00, 0x05, 0x61, 0x6b, 0x32, 0x33, 0x39]));
        }, 1000);
    });

    var ref = 0;
    var logging = true;
    var received = 0;
    client.on('data', function(data) {
        if (ref)
            clearTimeout(ref);
        ref = setTimeout(function(){
            var v = received;
            ++received;
            if (v === 0)
                client.write(new Buffer([0x85, 0x02, 0x01, 0x00, 0x80, 0x61, 0x49, 0xd7, 0x30, 0x19, 0x64, 0x66, 0x31, 0x98, 0xc4, 0x00, 0xda, 0xd0, 0x39, 0x02, 0xf6, 0x00, 0x75, 0xc0, 0xb0, 0x07, 0xc5, 0xf1, 0x58, 0x62, 0xe1, 0xda, 0x32, 0x82, 0xfc, 0x4a, 0x51, 0x8e, 0xc5, 0x0f, 0xb3, 0x4a, 0x77, 0xa9, 0x0c, 0xfb, 0x65, 0x56, 0xf1, 0x19, 0xb2, 0x15, 0xdd, 0x18, 0x24, 0xe6, 0xa2, 0x7c, 0x36, 0x80, 0x0f, 0x07, 0xe0, 0xe6, 0xc2, 0xdd, 0xaa, 0xa4, 0x4b, 0x2d, 0x8d, 0x9f, 0xe1, 0x24, 0xcd, 0xfa, 0x77, 0xed, 0x87, 0xdd, 0x16, 0x4c, 0xcc, 0xfb, 0x15, 0xc6, 0x65, 0x1c, 0xc6, 0xa9, 0x15, 0x82, 0x26, 0x45, 0x71, 0xfd, 0x4d, 0x09, 0x2e, 0x14, 0x53, 0x5b, 0xb6, 0x0c, 0x77, 0xd3, 0xb2, 0xc1, 0x75, 0xcc, 0x33, 0xf7, 0xcc, 0x61, 0x06, 0xc5, 0x38, 0xf6, 0x23, 0x25, 0x2b, 0x61, 0xee, 0xda, 0x4a, 0x30, 0x2f, 0x7b, 0xac, 0xb1, 0x77, 0xb5, 0x98, 0x00, 0x80, 0xa9, 0x74, 0xd4, 0x1c, 0x6f, 0xac, 0xad, 0x18, 0xb5, 0xa1, 0xdf, 0xb1, 0x4c, 0xcc, 0xdb, 0xd2, 0x00, 0x94, 0xe8, 0x59, 0x0d, 0x73, 0x38, 0xf2, 0xe8, 0xaa, 0x0e, 0xc3, 0xbc, 0xd9, 0x5f, 0x45, 0xca, 0x6c, 0xe7, 0xd6, 0xa4, 0xb3, 0xa0, 0x26, 0x27, 0x91, 0xee, 0x40, 0x51, 0x72, 0x8e, 0x2c, 0x50, 0x3a, 0xf0, 0xb9, 0x25, 0x46, 0x7e, 0x59, 0x46, 0x37, 0x49, 0xff, 0x4e, 0x07, 0x6c, 0x72, 0x9a, 0xab, 0x26, 0x2d, 0x56, 0xf2, 0x10, 0x28, 0xc7, 0xc1, 0x2e, 0x62, 0x84, 0x93, 0x3b, 0x71, 0x62, 0x08, 0x50, 0x03, 0x99, 0x33, 0x22, 0x43, 0xc7, 0x35, 0x5a, 0xf6, 0x9d, 0x74, 0xcb, 0xf1, 0x7c, 0x11, 0x08, 0xe6, 0xd8, 0x8d, 0xd6, 0x84, 0xc0, 0x67, 0xe4, 0x96, 0xb5, 0x15, 0x3f, 0x9c, 0xff, 0x73, 0x3e, 0x71, 0x79, 0xfe, 0x08, 0xed, 0xc3, 0xa7, 0xff, 0x65, 0x9e, 0x02, 0x9a, 0x79]));
            else
                callback();
            // if (v === 1) {
                // client.end();
                // callback();
            // }
                // client.write(new Buffer([0x07, 0x00, 0x05, 0x61, 0x6b, 0x32, 0x33, 0x39]));
            logging = true;
        }, 1000);
        if (logging)
            console.log(data, data + "");
    });

    client.on("end", function() {
        console.log("Connection closed");
    });

}
